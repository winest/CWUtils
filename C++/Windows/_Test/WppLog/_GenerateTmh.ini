//Complex Types Definition
//See MSDN article: "How do I create custom WPP extended format specification strings?"
//
//DEFINE_CPLX_TYPE(
//    TypeName ,            //i.e. HEXDUMP          //%!HEXDUMP!
//    HelperMacroName ,     //i.e. WPP_LOGHEXDUMP   //Marshalling macro, defined in _GenerateTmh.h or WPP_FLAGS(-D...) below.
//    ArgumentType ,        //i.e. xstr             //Argument type (structure to be created by above macro)
//    WppMofType ,          //i.e. ItemHEXDump      //MOF type that TracePrt can understand
//    WppMofFormat ,        //i.e. "s"              //A format specifier that TracePrt can understand
//    TypeSignature ,       //i.e. _HEXDUMP_        //Type signature (becomes a part of function name)
//    Priority ,            //i.e. 0                //Weight (0 is variable data length)
//    Slots                 //i.e. 2                //Maximum number of variable-length parameters that passes to TraceMessage() (optional, 1 default)
//)



//IPv6 Address
//Usage example: DbgOut( VERB , DBG_UTILS , "IPv6=%!IPV6ADDR!" , &((struct in6_addr)ipv6)  );
DEFINE_CPLX_TYPE( IPV6ADDR , WPP_LOGIPV6 , const char * , ItemIPV6Addr , "s" , _IPV6ADDR_ , 0 , 1 );

//Hex dump (variable length)
//Usage example: DbgOut( VERB , DBG_UTILS , "Data=%!HEXDUMP!" , WppHexDump(pBuf , ulBufSize) );
DEFINE_CPLX_TYPE( HEXDUMP , WPP_LOGHEXDUMP , const WppHexDump & , ItemHEXDump , "s" , _HEXDUMP_ , 0 , 2 );


//Unmark the following lines if you wan to use human-readable message from CWHttpParser
//CUSTOM_TYPE( HTTPPARSERERR , ItemEnum(_HttpParserErr) );
//CUSTOM_TYPE( HTTPFIELD , ItemEnum(_HttpFieldId) );
//CUSTOM_TYPE( HTTPTRANSFERENCODINGTYPE , ItemEnum(_HttpTransferEncodingType) );
//CUSTOM_TYPE( HTTPSTATUSCODE , ItemEnum(_HttpStatusCode) )